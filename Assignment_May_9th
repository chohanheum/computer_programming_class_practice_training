//버블정렬

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define N 5 // 정렬할 데이터의 개수를 상수로 정의
#define M 5 // 정렬할 데이터의 개수를 상수로 정의

void bubble_sort(int data[N][M],int n, int m); //이차원 배열을 이용한 버블 정렬 함수의 원형선언 
void print_array(int s[N][M],int n, int m); //이차원 배열을 출력하는 함수의 원형 선언

int main()
{
    int i;
    int j;
    int a[N][M];

    srand(time(NULL)); // 난수 생성을 위한 시드 설정
    for (i = 0; i < N; i++) // 2차원 배열에 랜덤값 할당
    {
        for (j = 0; j < M; j++)
        {
            a[i][j] = 1 + rand() % 999;
        }
    }
    print_array(a,N,M); //할당된 배열 출력
    bubble_sort(a,N,M); // 정렬 함수 호출
    print_array(a,N,M); // 정렬된 배열 출력
    return 0;
}

void bubble_sort(int data[N][M],int n, int m) // 이차원 배열을 이용한 버블 정렬 함수 구현
{
    int i; 
    int j;
    int temp;

    for (int i = 0; i < N * M; i++)
    {
        for (int k = 0; k < N; k++) // 행 정렬
        {
            for (j = 0; j < M-1; j++)
            {
                if (data[k][j] > data[k][j + 1]) // 이전 값이 다음 값보다 크면
                {
                    temp = data[k][j]; // ㅡㅡㅡㅡㅡㅡ┐
                    data[k][j] = data[k][j + 1]; // ㅡ│ ㅡ> 값 교환
                    data[k][j + 1] = temp; // ㅡㅡㅡㅡ┘
                }
            }
        }
    




        for (int l = 0; l < N - 1; l++) // 열 정렬
        {
            if (data[l][j] > data[l + 1][j - M + 1]) //이전 값이 다음 값보다 크면
            {
                temp = data[l][j]; // ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ┐
                data[l][j] = data[l + 1][j - M + 1]; // ㅡ│ㅡ> 값 교환
                data[l + 1][j - M + 1] = temp; // ㅡㅡㅡㅡ┘
            }
        }
    }
}

void print_array(int s[N][M], int len1, int len2) // 이차원 배열을 출력하는 함수 구현
{

    for (int i = 0; i < len1; i++) // 각 행마다 출력
    {
        for (int j = 0; j < len2; j++) // 행 안의 각 열 출력
        {
            printf("%5d", s[i][j]);  // 배열의 원소를 오른쪽 정렬하여 출력
        }
        printf("\n"); // 줄바꿈
    }
    printf("\n"); // 배열 출력 후 줄바꿈
}
